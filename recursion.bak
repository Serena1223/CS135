;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname recursion) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;;
;; ***************************************************
;; Serena Ge (20998413)
;; CS 135 Fall 2022
;; Assignment 06, Problem 1
;; ***************************************************
;;

;; Part A
;; (in-range a b lon) scans the lon and outputs a list of elements in [a, b]
;; Examples:
(check-expect (in-range 3 5 (list 1 5 3 9)) (list 5 3))
(check-expect (in-range 1 100 (list 150 23 52.1 -9)) (list 23 52.1))

;; in-range: Num Num (listof Num) -> (listof Num)


;; Part B
;;(spread) produces the positive difference between the largest and smallest elements in a list. 
;; Examples:
(check-expect (spread (list 2 1 5 1 3)) 4)
(check-expect (spread (list 3 -3 0 3)) 6)

;; spread: (listof Num) -> Num

;; Part C
;; (sel-sort) sorts a list of numbers into non-decreasing order. 

;; sel-sort: (listof Num) -> (listof Num)
(check-expect (sel-sort (list 4 51 0 4)) (list 0 4 4 51))
(check-expect (sel-sort (list 4 0 4)) (list 0 4 4))

;; (smallest-first) takes a list of numbers and outputs the list with specifically, the
;; smallest number in the beginning of the list.

;; Examples:
(check-expect (smallest-first (list 4 1 9 0)) (list 0 4 1 9))
(check-expect (smallest-first (list 1 9 0)) (list 0 1 9))











