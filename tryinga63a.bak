;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname tryinga63a) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Part A
;; (union s1 s2) produces a list without duplicates of the union of set 1 and set 2
;; Examples:
(check-expect (union (list 1 3 4) (list 1 5)) (list 1 3 4 5)) 
(check-expect (union (list 1 3 4 9) (list 1 3)) (list 1 3 4 9))

;; union: (setof Nat) (setof Nat) -> (setof Nat)

(define (union s1 s2)
  (cond
    [(and (empty? s1) (empty? s2)) empty]
    [(empty? s1) s2]
    [(empty? s2) s1]
    [(= (first s1) (first s2)) (cons (first s1) (union (rest s1) (rest s2)))]
    [(> (first s1) (first s2)) (cons (first s2) (cons (first s1)) (union (rest s1) (rest s2)))]
    [else (cons (first s1) (union (rest s1) s2))]))

;; Tests:
(check-expect (union (list 1 4) (list 1 2 5 8 19)) (list 1 2 4 5 8 19))
(check-expect (union (list 8 10) (list 1 2 5 8 19)) (list 1 2 5 8 10 19)) 